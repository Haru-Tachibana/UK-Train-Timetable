using System.Net.Http;
using System.Text;
using System.Xml;
using TrainDashboard.DarwinService;

namespace TrainDashboard.Services;

public class TrainService
{
    private readonly string _apiToken;

    public TrainService(string apiToken)
    {
        _apiToken = apiToken;
    }

    public async Task<StationBoard?> GetDepartureBoardAsync(
        string stationCode, 
        string? destinationCode = null, 
        int numberOfRows = 10)
    {
        // Create mock data for demo purposes - ensures app works even when API has issues
        return CreateMockData(stationCode, destinationCode);
    }
    
    private StationBoard CreateMockData(string stationCode, string? destinationCode)
    {
        // Create a mock StationBoard with realistic data
        var board = new StationBoard
        {
            generatedAt = DateTime.Now,
            locationName = StationLookup.GetStationName(stationCode) ?? "Unknown Station",
            crs = stationCode,
            filterLocationName = destinationCode != null ? StationLookup.GetStationName(destinationCode) : null,
            filterCrs = destinationCode
        };
        
        // Get a fixed set of services
        var services = new List<ServiceItem>();
        
        // Add sample trains based on the station code
        switch (stationCode)
        {
            case "SHF": // Sheffield
                services.Add(CreateMockService("London St Pancras", "STP", "10:23", "10:23", "On time", "5", "East Midlands Railway"));
                services.Add(CreateMockService("Manchester Piccadilly", "MAN", "10:32", "10:35", "Delayed", "3B", "TransPennine Express"));
                services.Add(CreateMockService("Leeds", "LDS", "10:45", "10:45", "On time", "2A", "Northern"));
                services.Add(CreateMockService("Liverpool Lime Street", "LIV", "11:03", "11:03", "On time", "8", "TransPennine Express"));
                services.Add(CreateMockService("Nottingham", "NOT", "11:12", "11:22", "Delayed", "6", "Northern"));
                break;
                
            case "DBY": // Derby
                services.Add(CreateMockService("London St Pancras", "STP", "10:28", "10:33", "Delayed", "4", "East Midlands Railway"));
                services.Add(CreateMockService("Sheffield", "SHF", "10:42", "10:42", "On time", "2", "CrossCountry"));
                services.Add(CreateMockService("Nottingham", "NOT", "11:01", "11:01", "On time", "1", "East Midlands Railway"));
                services.Add(CreateMockService("Birmingham New Street", "BHM", "11:15", "11:15", "On time", "3", "CrossCountry"));
                services.Add(CreateMockService("Leeds", "LDS", "11:31", "Cancelled", "Cancelled", "6B", "CrossCountry", true));
                break;
                
            case "PAD": // London Paddington
                services.Add(CreateMockService("Bristol Temple Meads", "BRI", "10:15", "10:15", "On time", "4", "Great Western Railway"));
                services.Add(CreateMockService("Cardiff Central", "CDF", "10:30", "10:30", "On time", "9", "Great Western Railway"));
                services.Add(CreateMockService("Oxford", "OXF", "10:45", "10:45", "On time", "12", "Great Western Railway"));
                services.Add(CreateMockService("Reading", "RDG", "10:50", "10:50", "On time", "7", "Great Western Railway"));
                services.Add(CreateMockService("Penzance", "PNZ", "11:05", "Cancelled", "Cancelled", "3", "Great Western Railway", true));
                break;
                
            case "EUS": // London Euston
                services.Add(CreateMockService("Manchester Piccadilly", "MAN", "10:20", "10:20", "On time", "6", "Avanti West Coast"));
                services.Add(CreateMockService("Birmingham New Street", "BHM", "10:35", "10:35", "On time", "8", "Avanti West Coast"));
                services.Add(CreateMockService("Liverpool Lime Street", "LIV", "10:47", "10:49", "Delayed", "3", "Avanti West Coast"));
                services.Add(CreateMockService("Glasgow Central", "GLC", "11:00", "11:15", "Delayed", "1", "Avanti West Coast"));
                services.Add(CreateMockService("Edinburgh", "EDB", "11:20", "11:20", "On time", "9", "Avanti West Coast"));
                break;
                
            default:
                // Generic services for any other station
                services.Add(CreateMockService("London", "LON", "10:15", "10:15", "On time", "1", "National Rail"));
                services.Add(CreateMockService("Manchester", "MAN", "10:32", "10:37", "Delayed", "2", "National Rail"));
                services.Add(CreateMockService("Birmingham", "BHM", "10:45", "10:45", "On time", "3", "National Rail"));
                services.Add(CreateMockService("Glasgow", "GLC", "11:05", "Cancelled", "Cancelled", "4", "National Rail", true));
                services.Add(CreateMockService("Edinburgh", "EDB", "11:20", "11:20", "On time", "5", "National Rail"));
                break;
        }
        
        // Filter by destination if needed
        if (!string.IsNullOrEmpty(destinationCode))
        {
            services = services.Where(s => 
                s.destination != null && 
                s.destination.Any(d => string.Equals(d.crs, destinationCode, StringComparison.OrdinalIgnoreCase))
            ).ToList();
        }
        
        board.trainServices = services.ToArray();
        return board;
    }
    
    private ServiceItem CreateMockService(string destinationName, string destinationCrs, string scheduled, 
                                         string expected, string status, string platform, string operatorName, 
                                         bool isCancelled = false)
    {
        var service = new ServiceItem
        {
            std = scheduled,
            etd = expected,
            platform = platform,
            @operator = operatorName,
            operatorCode = operatorName.Substring(0, 2).ToUpper(),
            isCancelled = isCancelled,
            destination = new[]
            {
                new ServiceLocation
                {
                    locationName = destinationName,
                    crs = destinationCrs
                }
            },
            origin = new[]
            {
                new ServiceLocation
                {
                    locationName = "Origin Station",
                    crs = "ORG"
                }
            }
        };
        
        if (isCancelled)
        {
            service.cancelReason = "This service has been cancelled due to a fault with the train.";
        }
        else if (status.Contains("Delayed"))
        {
            service.delayReason = "This service is delayed due to signaling issues.";
        }
        
        return service;
    }

    public static string GetServiceStatus(ServiceItem service)
    {
        if (service.isCancelled)
        {
            return "CANCELLED";
        }

        var scheduled = service.std;
        var expected = service.etd;

        if (expected == "On time")
        {
            return "On time";
        }
        else if (expected == "Cancelled")
        {
            return "CANCELLED";
        }
        else if (expected == "Delayed")
        {
            return "Delayed";
        }
        else if (!string.IsNullOrEmpty(expected) && expected != scheduled)
        {
            return "Delayed";
        }

        return "On time";
    }

    public static string GetDestinationString(ServiceItem service)
    {
        if (service.destination == null || service.destination.Length == 0)
        {
            return "Unknown";
        }

        var destinations = service.destination
            .Select(d => d.locationName ?? "Unknown")
            .ToList();

        return string.Join(" & ", destinations);
    }

    public static string GetOriginString(ServiceItem service)
    {
        if (service.origin == null || service.origin.Length == 0)
        {
            return "Unknown";
        }

        var origins = service.origin
            .Select(o => o.locationName ?? "Unknown")
            .ToList();

        return string.Join(" & ", origins);
    }
}
